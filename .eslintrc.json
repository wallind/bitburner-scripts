{
	"parser": "@typescript-eslint/parser",
	"env": {
		"browser": true,
		"es2021": true
	},
	"extends": [
		"airbnb",
		"airbnb/hooks",
		"plugin:@typescript-eslint/recommended",
		"plugin:import/typescript"
	],
	"parserOptions": {
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 12,
		"sourceType": "module"
	},
	"plugins": [
		"react",
		"@typescript-eslint"
	],
	"settings": {
		"import/extensions": [
			".js",
			".jsx",
			".ts",
			".tsx",
			".scss"
		]
	},
	"globals": {
		// this is here to provide access to JSX.element which is needed for the rule @typescript-eslint/explicity-module-boundary-types
		"JSX": "readonly",
		"NodeJS": "readonly",
		// this is here because as of Meteor 2.5, Assets is not importable as an ES6 module, and Meteor instructs to just use it as a global
		"Assets": "readonly"
	},
	"rules": {
		"no-use-before-define": "off",
		"@typescript-eslint/no-use-before-define": [
			"error",
			"nofunc"
		],
		"import/prefer-default-export": "off",
		"indent": [
			"error",
			"tab",
			{
				"SwitchCase": 1
			}
		],
		"semi": [
			"error",
			"never"
		],
		"quotes": [
			"error",
			"single",
			{
				"allowTemplateLiterals": true
			}
		],
		"jsx-quotes": [
			"error",
			"prefer-single"
		],
		"max-len": "off",
		"camelcase": "error",
		"no-tabs": "off",
		"no-mixed-spaces-and-tabs": "error",
		"comma-dangle": [
			"error",
			{
				"arrays": "always-multiline",
				"objects": "always-multiline",
				"imports": "always-multiline",
				"exports": "always-multiline",
				"functions": "never"
			}
		],
		"react/no-array-index-key": "error",
		"react/jsx-pascal-case": "error",
		"jsx-a11y/label-has-associated-control": "error",
		"react/jsx-indent": [
			"error",
			"tab"
		],
		"react/jsx-indent-props": [
			"error",
			"tab"
		],
		"react/jsx-props-no-spreading": "error",
		"array-callback-return": "error",
		"consistent-return": "error",
		"object-curly-newline": [
			"error",
			{
				"multiline": true
			}
		],
		"react-hooks/exhaustive-deps": "off",
		"arrow-parens": "error",
		"no-nested-ternary": "error",
		"no-undef": "error",
		"no-underscore-dangle": "off",
		"no-plusplus": "off",
		"react/jsx-filename-extension": [
			2,
			{
				"extensions": [
					".jsx",
					".tsx"
				]
			}
		],
		"import/extensions": [
			"error",
			"never"
		],
		"import/no-absolute-path": "off",
		"no-trailing-spaces": [
			"error",
			{
				"ignoreComments": true
			}
		],
		"prefer-arrow-callback": "error",
		"no-unused-expressions": [
			"error",
			{
				"allowShortCircuit": true,
				"enforceForJSX": true
			}
		],
		// this and react/prop-types are only disabled in this block - they're
		// re-enabled in the "overrides" block below only for .ts and .tsx files
		"@typescript-eslint/explicit-module-boundary-types": "off",
		"react/prop-types": "off",
		"no-lonely-if": "error",
		"func-names": "error",
		"object-shorthand": "error",
		"react/jsx-wrap-multilines": "error",
		"operator-linebreak": [
			"error",
			"before"
		],
		"no-restricted-syntax": "off",
		"import/no-unresolved": "off",
		"no-shadow": "off",
		"@typescript-eslint/no-shadow": [
			"error",
			{
				"builtinGlobals": true
			}
		],
		"import/order": "error",
		"react/jsx-curly-newline": "error",
		"linebreak-style": 0,
		// this would preferably be on but this rule doesn't support default *params*, only default props
		// in functional components, default params are better than default props
		// (see https://stackoverflow.com/questions/47774695/react-functional-component-default-props-vs-default-parameters)
		// so we'll leave it off until the rule can accommodate that
		"react/require-default-props": "off",
		// the three below rules are literally all just enforcing that if statements use curly braces
		// in this style:
		// if (condition) {
		//		statement
		// } else { 
		//		statement
		// }
		"nonblock-statement-body-position": [
			"error",
			"below"
		],
		"brace-style": [
			"error",
			"1tbs"
		],
		"curly": [
			"error"
		],
		"no-console": "error",
		"react/function-component-definition": [
			2,
			{
				"namedComponents": "arrow-function"
			}
		],
		"class-methods-use-this": "off"
	}
}
